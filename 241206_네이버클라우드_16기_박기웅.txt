-- 김선해 고객의 전화번호를 찾아라.
select e from customer where name='김선해';
-- 모든 도서의 이름과 가격을 검색해라.
select bookname,price from book;
-- 모든 도서의 도서번호, 도서이름, 출판사, 가격을 검색해라.
select * from book;
-- 도서 테이블에 있는 모든 출판사를 검색해라. (중복제거해서)
select distinct publisher from book;
-- 가격이 20000원 미만인 도서를 검색해라.
select * from book where price<20000;
-- 가격이 10000원 이상 20000 이하인 도서를 검색해라.
select * from book where price between 1000 and 20000;
-- 출판사가 ‘아이티’ 혹은 ‘비트아이티’ 인 도서를 검색해라.
select * from book where publisher in('아이티','비트아이티');
-- 출판사가 ‘아이티’ 혹은 ‘비트아이티’ 아닌 도서를 검색해라.
select * from book where publisher not in ('아이티','비트아이티');
-- ‘컴퓨터의 역사’를 출간한 출판사를 검색해라.
select publisher from book where bookname='컴퓨터의 역사';
-- 도서이름에 ‘컴퓨터’가 포함된 출판사를 검색해라.
select publisher from book where bookname like ('%컴퓨터%');
-- 도서이름의 왼쪽 두번 째에 ‘퓨’라는 문자열을 갖는 도서를 검색해라.
select * from book where bookname like ('_퓨%');
-- 컴퓨터에 관한 도서 중 가격이 20000원 이상인 도서를 검색해라.
select * from book where bookname like ('%컴퓨터%') and price>=20000; 
-- 도서를 이름순으로 검색해라.
select * from book order by bookname;
-- 도서를 가격순으로 검색하고, 가격이 같으면 이름순으로 검색해라.
select * from book order by price,bookname;
-- 도서를 가격의 내림차순으로 검색해라. 가격이 같다면 출판사의 오름차순으로 검색해라.
select * from book order by price desc,publisher;
-- 고객이 주문한 도서의 총 판매액을 구해라.
select sum(saleprice) from orders;
-- 2번 김선해 고객이 주문한 도서의 총 판매액을 구해라.
select sum(saleprice) from orders where custid=2;
-- 고객이 주문한 도서의 총 판매액, 평균값, 최저가, 최고가를 구해라.
select sum(saleprice),avg(saleprice),min(saleprice),max(saleprice) from orders;
-- 601서점의 도서 판매 건수를 구해라.
select count(*) from orders;
-- 고객별로 주문한 도서의 총 수량과 총 판매액을 구해라.
select custid,count(*),sum(saleprice) from orders group by custid;
-- 가격이 8000원 이상인 도서를 구매한 고객에 대하여 고객별 주문 도서의 총 수량을 구해라. 
-- 단, 두 권 이상 구매한 고객만 구해라.
select custid,count(*) from orders 
where saleprice>=8000
group by custid
having count(*)>=2;
-- 고객과 고객의 주문에 관한 데이터를 모두 보여라.
select * from customer natural join orders;
-- 고객과 고객의 주문에 관한 데이터를 고객번호 순으로 정렬하여 보여라.
select * from customer natural join orders order by custid;
-- 고객의 이름과 고객이 주문한 도서의 판매가격을 검색해라.
select name,price from customer natural join book natural join orders;
-- 고객별로 주문한 모든 도서의 총 판매액을 구하고, 고객별로 정렬해라.
select name,sum(saleprice) from customer natural join orders group by name;
-- 고객의 이름과 고객이 주문한 도서의 이름을 구해라.
select name,bookname from customer natural join book natural join orders;
-- 가격이 20000원인 도서를 주문한 고객의 이름과 도서의 이름을 구해라.
select name,bookname from customer natural join book natural join orders where price=20000;
-- 도서를 구매하지 않은 고객을 포함하여 고객의 이름과 고객이 주문한 도서의 판매가격을 구해라.
select name,price from customer c left outer join book b natural join orders o on c.custid=o.custid;
-- 가장 비싼 도서의 이름을 구해라.
select bookname from book where price=(select max(price) from book);
-- 도서를 구매한 적이 있는 고객의 이름을 검색해라.
select distinct name from orders natural join customer;
-- 비트아이티에서 출판한 도서를 구매한 고객의 이름을 보여라.
select name,bookname from orders natural join customer natural join book 
where publisher='비트아이티';
-- 출판사별로 출판사의 평균 도서 가격보다 비싼 도서를 구해라.
select * from book b  where price > 
(select avg(price) from book where publisher=b.publisher); 
-- Book테이블에 새로운 도서 ‘공학 도서’를 삽입해라. 공학 도서는 더샘에서 출간했으며 가격을 40000원이다.
insert into book(bookname,publisher,price) values('공학 도서','더샘',40000);
-- Book테이블에 새로운 도서 ‘공학 도서’를 삽입해라. 공학 도서는 더샘에서 출간했으며 가격은 미정이다.
insert into book(bookname,publisher) values('공학 도서','더샘');
-- Customer테이블에서 고객번호가 5인 고객의 주소를 ‘서울시 서초구’로 변경해라.
update customer set address='서울시 서초구' where custid=5;
select * from customer;
-- Customer테이블에서 박승철 고객의 주소를 김선해 고객의 주소로 변경해라.
set sql_safe_updates=0;
update customer c1 join customer c2 on c2.name='김선해' 
set c1.address=c2.address where c1.name='박승철';
-- 아이티에서 출판한 도서의 제목과 제목의 글자수를 확인해라.
select bookname,char_length(bookname) from book where publisher='아이티';
-- 601서점의 고객 중에서 같은 성(이름 성)을 가진 사람이 몇 명이나 되는지 성별 인원수를 구해라.
select substr(name,1,1),count(*) from customer group by substr(name,1,1);
-- 601서점은 주문일로부터 10일 후 매출을 확정한다. 각 주문의 확정일자를 구해라.
select adddate(orderdate,interval 10 day) from orders;
-- 601서점이 2024년 5월 7일에 주문받은 도서의 주문번호, 주문일, 고객번호, 도서번호를 모두 보여라. 주문일은 ‘yyyy-mm-dd요일’형태로 표시한다.
select orderid,orderdate,custid,bookid from orders where orderdate='2024-05-07';
-- 이름, 전화번호가 포함된 고객목록을 보여라. 단, 전화번호가 없는 고객은 ‘연락처없음’으로 표시해라.
select name,ifnull(e,'연락처없음') as e from customer;
-- 평균 주문금액 이하의 주문에 대해 주문번호와 금액을 보여라.
select * from orders where saleprice < (select avg(saleprice) from orders);
-- 각 고객의 평균 주문금액보다 큰 금액의 주문 내역에 대해 주문번호, 고객번호, 금액을 보여라.
select orderid,custid,saleprice from orders where saleprice > (select avg(saleprice) from orders);
-- 서울시에 거주하는 고객에게 판매한 도서의 총판매액을 구해라.
select custid,sum(saleprice) from customer natural join orders where address like ('서울시%') group by custid;
-- Customer테이블에서 고객번호가 5인 고객을 삭제해라.
delete from customer where custid=5;